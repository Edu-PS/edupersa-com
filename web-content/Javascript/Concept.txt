Funciones
    Son piezas de codigos que realizan una funcion.

    Se pueden definir de varias maneras.
        funcion anonima
            function (par1, par2,...parN) {contenido de la funcion}
        
        Funcion con nombre
            funtion nombre_funcion (par1, par2,...parN) {contenido de la funcion}

        Funcion flecha
            (par1, par2,...parN) => {contenido de la funcion}
    
    Una funcion se puede asignar a una variable

        const nombre_variable = (par1, par2,...parN) => {contenido de la funcion}

STACK

HEAP

// TERNARY (?)
    - El operador ternario es el utilizado para imprimir una cosa o la otra si la condicion es true.
        boolean ? returnThisIfIsTrue : returnThisIfIsFalse;

// LOGICO AND (&&)
    - Como condicionante se utiliza para devolver el valor de la derecha si la variable es true.
        boolean && returnThisIfIsTrue;


// JSON
    - Siempre se deben colocar los valores clave entre comillas dobles.

    - [] - Representa un array

    - {} - Representa un objeto

    - JSON.stringify(objeto_javascript)
        - Convierte el objeto de javascript en formato JSON.
    
    - JSON.parse(<texto>)
        - Convierte un texto(en formato JSON) JSON en un objeto de javascript.
    
    - response.json()
        - Convierte una respuesta JSON en el objeto javascript

        - Devuelve una promesa, por eso se utiliza cuando se realiza un fetch
            EJ - fetch('https://url/del/servicio/web') -> Aqui la web devuelve el resultado en JSON.
                .then(response => response.json())  -> Convierte en objeto la respuesta JSON.
                .then(json => {
                // aquí tenemos el parámetro json que contien el dato que nos ha devuelto el servicio web.
                // podemos hacer cualquier cosa con él...
                console.log(json)
                });


// FOR
    - for (let i = 0; i <= arrayBancos.length - 1; i++) {Sentencias}


// FOR ARRAY
    - for (elemento of array) {sentencias}


// FOR OBJETOS
    - for (elemento in objeto) {sentencia}


// ACEDER ARRAY
    - array[indice]

// ACCEDER OBJETO
    - objeto.nombrePropiedad

    - objeto["nombrePropiedad"] -> devuelve el valor. 
        (Este se usa cuando el nombrePropiedad es raro, como "nombre-asi" que no se deberia usar ese nombre en la propiedad)

// DIFERENCIA ENTRE OBJETO Y JSON
    - JSON -> Tiene comillas en los nombres de las propiedades.
        [{"id": "1", "name": "nombre_1"}, {"id": "2", "name": "nombre_2"},{"id": "3", "name": "nombre_3"}]
    
    - OBJETO JAVASCRIPT -> Sus nombres de las propiedades no tienen comillas.
        [{id: "1", name: "nombre_1"}, {id: "2", name: "nombre_2"},{id: "3", name: "nombre_3"}]
    

// TERNARIO (?)
    condicion_evaluar ? si_es_true : si_es_false;

// localStorage.setItem("clave", valor) -API de almacenamiento web
    - Permite almacenar valores en el navegador en formato "clave-valor" y despues recuperarlos por la clave.

// sessionStorage ( Window.sessionStorage )
    - Permite almacenar valores en el navegador que se mantiene mientras el navegador este abierto (sesion)